DT <- DT %>%
dplyr::mutate(labeltext = dplyr::if_else(!!rlang::sym(label_col) %in% top5_gene[[label_col]], !!rlang::sym(label_col), ''))
}
labelgene=NULL
# If labelgene is provided, update labeltext accordingly
if (!is.null(labelgene)) {
DT <- DT %>%
dplyr::mutate(labeltext = dplyr::if_else(!!rlang::sym(label_col) %in% labelgene, !!rlang::sym(label_col), labeltext))
} else{
# Select top 5 genes for UP and DOWN groups
top5_gene <- DT %>%
dplyr::filter(Group == 'UP') %>%
dplyr::arrange(desc(logFC)) %>%
dplyr::slice_head(n = 5) %>%
dplyr::bind_rows(
DT %>%
dplyr::filter(Group == 'DOWN') %>%
dplyr::arrange(logFC) %>%
dplyr::slice_head(n = 5)
)
# Label top 5 genes using the specified label column
DT <- DT %>%
dplyr::mutate(labeltext = dplyr::if_else(!!rlang::sym(label_col) %in% top5_gene[[label_col]], !!rlang::sym(label_col), ''))
}
label_col = NULL
if(is.null(label_col)){
label_col = names(DT.original)[1]
}
options(ggrepel.max.overlaps = Inf)
DT <- DT.original
# Set initial group to 'Others' and update based on thresholds
DT <- DT %>%
dplyr::mutate(Group = 'Others',
Group = dplyr::if_else(logFC >= lfc_threshold, 'UP', Group),
Group = dplyr::if_else(logFC <= -lfc_threshold, 'DOWN', Group),
Group = dplyr::if_else(adj.P.Val >= fdr_threshold, 'Others', Group),
labeltext = '')
# If labelgene is provided, update labeltext accordingly
if (!is.null(labelgene)) {
DT <- DT %>%
dplyr::mutate(labeltext = dplyr::if_else(!!rlang::sym(label_col) %in% labelgene, !!rlang::sym(label_col), labeltext))
} else{
# Select top 5 genes for UP and DOWN groups
top5_gene <- DT %>%
dplyr::filter(Group == 'UP') %>%
dplyr::arrange(desc(logFC)) %>%
dplyr::slice_head(n = 5) %>%
dplyr::bind_rows(
DT %>%
dplyr::filter(Group == 'DOWN') %>%
dplyr::arrange(logFC) %>%
dplyr::slice_head(n = 5)
)
# Label top 5 genes using the specified label column
DT <- DT %>%
dplyr::mutate(labeltext = dplyr::if_else(!!rlang::sym(label_col) %in% top5_gene[[label_col]], !!rlang::sym(label_col), ''))
}
# Select top 5 genes for UP and DOWN groups
top5_gene <- DT %>%
dplyr::filter(Group == 'UP') %>%
dplyr::arrange(desc(logFC)) %>%
dplyr::slice_head(n = 5) %>%
dplyr::bind_rows(
DT %>%
dplyr::filter(Group == 'DOWN') %>%
dplyr::arrange(logFC) %>%
dplyr::slice_head(n = 5)
)
View(top5_gene)
View(DT.original)
View(DT)
View(top5_gene)
up_rows <- DT[DT$Group == "UP", ]
up_rows <- DT[DT$Group == "UP", ]
sorted_up <- up_rows[order(-up_rows$logFC), ]
top_indices <- head(rownames(sorted_up), 5)
t <- DT[top_indices,]
View(t)
View(top5_gene)
View(t)
View(up_rows)
View(sorted_up)
View(DT)
DT <- DT.original
# Set initial group to 'Others' and update based on thresholds
DT <- DT %>%
dplyr::mutate(Group = 'Others',
Group = dplyr::if_else(logFC >= lfc_threshold, 'UP', Group),
Group = dplyr::if_else(logFC <= -lfc_threshold, 'DOWN', Group),
Group = dplyr::if_else(adj.P.Val >= fdr_threshold, 'Others', Group),
labeltext = '')
up_rows <- DT[DT$Group == "UP", ]
sorted_up <- up_rows[order(-up_rows$logFC), ]
top_indices <- head(rownames(sorted_up), 5)
down_rows <- DT[DT$Group == "DOWN", ]
sorted_down <- down_rows[order(-down_rows$logFC), ]
top_indices <- as.numeric(c(head(rownames(sorted_up), 5), head(rownames(sorted_down), 5)))
DT$labeltext[top_indices] <- DT[top_indices, label_col]
View(DT)
g <- ggplot2::ggplot(DT, ggplot2::aes(x = logFC, y = -log10(adj.P.Val))) +
ggplot2::geom_point(ggplot2::aes(color = Group)) +
ggplot2::scale_color_manual(breaks = c("DOWN", "Others", "UP"),
values = c("#67a9cf", "#969696", "#ef8a62")) +
ggplot2::theme_bw(base_size = 12) +
ggplot2::theme(legend.position = "bottom") +
ggrepel::geom_label_repel(
data = DT,
ggplot2::aes(label = labeltext),
size = 5,
box.padding = grid::unit(0.35, "lines"),
point.padding = grid::unit(0.3, "lines")) +
ggplot2::geom_hline(yintercept = -log10(fdr_threshold), linetype = "dashed") +
ggplot2::geom_vline(xintercept = lfc_threshold, linetype = "dashed") +
ggplot2::geom_vline(xintercept = -lfc_threshold, linetype = "dashed") +
ggplot2::theme_classic()
g
up_rows <- DT[DT$Group == "UP", ]
sorted_up <- up_rows[order(-up_rows$logFC), ]
down_rows <- DT[DT$Group == "DOWN", ]
sorted_down <- down_rows[order(-down_rows$logFC), ]
top_indices <- as.numeric(c(head(rownames(sorted_up), 5), head(rownames(sorted_down), 5)))
DT$labeltext[top_indices] <- DT[top_indices, label_col]
g <- ggplot2::ggplot(DT, ggplot2::aes(x = logFC, y = -log10(adj.P.Val))) +
ggplot2::geom_point(ggplot2::aes(color = Group)) +
ggplot2::scale_color_manual(breaks = c("DOWN", "Others", "UP"),
values = c("#67a9cf", "#969696", "#ef8a62")) +
ggplot2::theme_bw(base_size = 12) +
ggplot2::theme(legend.position = "bottom") +
ggrepel::geom_label_repel(
data = DT,
ggplot2::aes(label = labeltext),
size = 5,
box.padding = grid::unit(0.35, "lines"),
point.padding = grid::unit(0.3, "lines")) +
ggplot2::geom_hline(yintercept = -log10(fdr_threshold), linetype = "dashed") +
ggplot2::geom_vline(xintercept = lfc_threshold, linetype = "dashed") +
ggplot2::geom_vline(xintercept = -lfc_threshold, linetype = "dashed") +
ggplot2::theme_classic()
g
up_rows <- DT[DT$Group == "UP", ]
sorted_up <- up_rows[order(-up_rows$logFC), ]
down_rows <- DT[DT$Group == "DOWN", ]
sorted_down <- down_rows[order(down_rows$logFC), ]
top_indices <- as.numeric(c(head(rownames(sorted_up), 5), head(rownames(sorted_down), 5)))
DT$labeltext[top_indices] <- DT[top_indices, label_col]
g <- ggplot2::ggplot(DT, ggplot2::aes(x = logFC, y = -log10(adj.P.Val))) +
ggplot2::geom_point(ggplot2::aes(color = Group)) +
ggplot2::scale_color_manual(breaks = c("DOWN", "Others", "UP"),
values = c("#67a9cf", "#969696", "#ef8a62")) +
ggplot2::theme_bw(base_size = 12) +
ggplot2::theme(legend.position = "bottom") +
ggrepel::geom_label_repel(
data = DT,
ggplot2::aes(label = labeltext),
size = 5,
box.padding = grid::unit(0.35, "lines"),
point.padding = grid::unit(0.3, "lines")) +
ggplot2::geom_hline(yintercept = -log10(fdr_threshold), linetype = "dashed") +
ggplot2::geom_vline(xintercept = lfc_threshold, linetype = "dashed") +
ggplot2::geom_vline(xintercept = -lfc_threshold, linetype = "dashed") +
ggplot2::theme_classic()
print(g)
DT <- DT.original
# Set initial group to 'Others' and update based on thresholds
DT <- DT %>%
dplyr::mutate(Group = 'Others',
Group = dplyr::if_else(logFC >= lfc_threshold, 'UP', Group),
Group = dplyr::if_else(logFC <= -lfc_threshold, 'DOWN', Group),
Group = dplyr::if_else(adj.P.Val >= fdr_threshold, 'Others', Group),
labeltext = '')
up_indices <- order(DT$logFC, decreasing = TRUE)[DT$Group == "UP"]
top_up_indices <- head(up_indices, 5)
down_indices <- order(DT$logFC, decreasing = FALSE)[DT$Group == "DOWN"]
top_down_indices <- head(down_indices, 5)
top_indices <- c(top_up_indices, top_down_indices)
DT$labeltext[top_indices] <- DT[top_indices, label_col]
g <- ggplot2::ggplot(DT, ggplot2::aes(x = logFC, y = -log10(adj.P.Val))) +
ggplot2::geom_point(ggplot2::aes(color = Group)) +
ggplot2::scale_color_manual(breaks = c("DOWN", "Others", "UP"),
values = c("#67a9cf", "#969696", "#ef8a62")) +
ggplot2::theme_bw(base_size = 12) +
ggplot2::theme(legend.position = "bottom") +
ggrepel::geom_label_repel(
data = DT,
ggplot2::aes(label = labeltext),
size = 5,
box.padding = grid::unit(0.35, "lines"),
point.padding = grid::unit(0.3, "lines")) +
ggplot2::geom_hline(yintercept = -log10(fdr_threshold), linetype = "dashed") +
ggplot2::geom_vline(xintercept = lfc_threshold, linetype = "dashed") +
ggplot2::geom_vline(xintercept = -lfc_threshold, linetype = "dashed") +
ggplot2::theme_classic()
print(g)
t<-DT[down_indices]
t<-DT[down_indices,]
View(t)
g
down_indices <- order(DT$logFC, decreasing = FALSE)[DT$Group == "DOWN"]
top_down_indices <- head(down_indices, 5)
down_indices <- order(DT$logFC, decreasing = FALSE)[DT$Group == "DOWN"]
t<-DT[down_indices,]
View(t)
DT <- DT.original
# Set initial group to 'Others' and update based on thresholds
DT <- DT %>%
dplyr::mutate(Group = 'Others',
Group = dplyr::if_else(logFC >= lfc_threshold, 'UP', Group),
Group = dplyr::if_else(logFC <= -lfc_threshold, 'DOWN', Group),
Group = dplyr::if_else(adj.P.Val >= fdr_threshold, 'Others', Group),
labeltext = '')
up_rows <- which(DT$Group == "UP")
sorted_up_indices <- up_rows[order(DT$logFC[up_rows], decreasing = FALSE)]
top_up_indices <- head(sorted_up_indices, 5)
down_rows <- which(DT$Group == "DOWN")
sorted_down_indices <- down_rows[order(DT$logFC[down_rows], decreasing = FALSE)]
top_down_indices <- head(sorted_down_indices, 5)
top_indices <- c(top_up_indices, top_down_indices)
DT$labeltext[top_indices] <- DT[top_indices, label_col]
g <- ggplot2::ggplot(DT, ggplot2::aes(x = logFC, y = -log10(adj.P.Val))) +
ggplot2::geom_point(ggplot2::aes(color = Group)) +
ggplot2::scale_color_manual(breaks = c("DOWN", "Others", "UP"),
values = c("#67a9cf", "#969696", "#ef8a62")) +
ggplot2::theme_bw(base_size = 12) +
ggplot2::theme(legend.position = "bottom") +
ggrepel::geom_label_repel(
data = DT,
ggplot2::aes(label = labeltext),
size = 5,
box.padding = grid::unit(0.35, "lines"),
point.padding = grid::unit(0.3, "lines")) +
ggplot2::geom_hline(yintercept = -log10(fdr_threshold), linetype = "dashed") +
ggplot2::geom_vline(xintercept = lfc_threshold, linetype = "dashed") +
ggplot2::geom_vline(xintercept = -lfc_threshold, linetype = "dashed") +
ggplot2::theme_classic()
print(g)
DT <- DT.original
# Set initial group to 'Others' and update based on thresholds
DT <- DT %>%
dplyr::mutate(Group = 'Others',
Group = dplyr::if_else(logFC >= lfc_threshold, 'UP', Group),
Group = dplyr::if_else(logFC <= -lfc_threshold, 'DOWN', Group),
Group = dplyr::if_else(adj.P.Val >= fdr_threshold, 'Others', Group),
labeltext = '')
up_rows <- which(DT$Group == "UP")
sorted_up_indices <- up_rows[order(DT$logFC[up_rows], decreasing = TRUE)]
top_up_indices <- head(sorted_up_indices, 5)
down_rows <- which(DT$Group == "DOWN")
sorted_down_indices <- down_rows[order(DT$logFC[down_rows], decreasing = FALSE)]
top_down_indices <- head(sorted_down_indices, 5)
top_indices <- c(top_up_indices, top_down_indices)
DT$labeltext[top_indices] <- DT[top_indices, label_col]
g <- ggplot2::ggplot(DT, ggplot2::aes(x = logFC, y = -log10(adj.P.Val))) +
ggplot2::geom_point(ggplot2::aes(color = Group)) +
ggplot2::scale_color_manual(breaks = c("DOWN", "Others", "UP"),
values = c("#67a9cf", "#969696", "#ef8a62")) +
ggplot2::theme_bw(base_size = 12) +
ggplot2::theme(legend.position = "bottom") +
ggrepel::geom_label_repel(
data = DT,
ggplot2::aes(label = labeltext),
size = 5,
box.padding = grid::unit(0.35, "lines"),
point.padding = grid::unit(0.3, "lines")) +
ggplot2::geom_hline(yintercept = -log10(fdr_threshold), linetype = "dashed") +
ggplot2::geom_vline(xintercept = lfc_threshold, linetype = "dashed") +
ggplot2::geom_vline(xintercept = -lfc_threshold, linetype = "dashed") +
ggplot2::theme_classic()
print(g)
devtools::load_all()
df <- readRDS("EXAMPLES/VIRUS/virus_data.rds")
meta <- readRDS("EXAMPLES/VIRUS/virus_metadata.rds")
dat_pro <- create_protdata(df, intensity_cols = c(4:148), meta)
treatment_samples <- c("EBV_5_5d_1", "EBV_5_5d_1", "EBV_5_5d_1")
control_samples <- c("EBV_0_5d_1", "EBV_0_5d_2", "EBV_0_5d_3")
Log2_DP <- ProtPipe::log2_transform(dat_pro)
DE <- do_limma(Log2_DP, treatment_samples = treatment_samples, control_samples = control_samples)
plot_volcano(DE, label_col = "Genes")
shiny::runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
df <- data.table::fread("EXAMPLES/test_data/test_protein_report.csv")
View(df)
df <- data.table::fread("EXAMPLES/test_data/test_protein_report.csv")
meta <- data.table::fread("EXAMPLES/test_data/test_conditions.csv")
dat_pro <- create_protdata(df, condition = meta)
View(dat_pro)
View(dat_pro@data)
View(dat_pro@condition)
View(meta)
View(meta)
View(df)
meta <- data.table::fread("EXAMPLES/test_data/test_conditions.csv")
View(meta)
meta <- data.table::fread("EXAMPLES/test_data/test_conditions.csv")
View(meta)
meta <- data.table::fread("EXAMPLES/test_data/test_conditions.csv")
View(meta)
meta <- data.table::fread("EXAMPLES/test_data/test_conditions.csv")
dat_pro <- create_protdata(df, condition = meta)
View(dat_pro)
View(dat_pro@condition)
df <- data.table::fread("EXAMPLES/test_data/test_protein_report.csv")
meta <- data.table::fread("EXAMPLES/test_data/test_conditions.csv")
dat_pro <- create_protdata(df, condition = meta)
View(meta)
View(dat_pro)
View(dat_pro@condition)
View(dat_pro@data)
View(dat_pro@prot_meta)
df <- data.table::fread("EXAMPLES/test_data/test_protein_report.csv")
meta <- data.table::fread("EXAMPLES/test_data/test_conditions.csv")
dat_pro <- create_protdata(df, condition = meta)
df <- data.table::fread("EXAMPLES/test_data/test_protein_report.csv") %>% as.data.frame()
meta <- data.table::fread("EXAMPLES/test_data/test_conditions.csv") %>% as.data.frame()
dat_pro <- create_protdata(df, condition = meta)
View(dat_pro)
View(dat_pro@condition)
View(meta)
dat_pro1 <- create_protdata(df, condition = meta)
nrow(meta)
ncol(df)
View(df)
View(meta)
dat <- df
condition = meta
# Check that data is a data frame
if (!is.data.frame(dat)) {
stop("The 'data' argument must be a data frame.")
}
#get the intensity cols
if (is.null(intensity_cols)){
intensity_cols <- detect_intensity_cols(dat)
}
#standardize the column names and order
#dat <- standardize_format(data)
colnames(dat) <- trim_colnames(dat)
trim_colnames <- function(DT) {
colnames_out <- gsub(pattern="\\[.*\\] ", replacement='', x=colnames(DT))   # trim leading [N]
colnames_out <- gsub(pattern="\\..*\\.PG\\.Quantity|\\.PG\\.Quantity|\\..*Quantity.*", replacement='', x=colnames_out)   # remove suffix
# Remove everything before the last "/" and remove extensions like .raw or .mzml
colnames_out <- gsub(pattern=".*/", replacement='', x=colnames_out)
colnames_out <- gsub(pattern="\\.(raw|mzML)$", replacement='', x=colnames_out)
return(colnames_out)
}
#standardize the column names and order
#dat <- standardize_format(data)
colnames(dat) <- trim_colnames(dat)
View(dat)
trim_colnames <- function(DT) {
#colnames_out <- gsub(pattern="\\[.*\\] ", replacement='', x=colnames(DT))   # trim leading [N]
colnames_out <- gsub(pattern="\\..*\\.PG\\.Quantity|\\.PG\\.Quantity|\\..*Quantity.*", replacement='', x=colnames_out)   # remove suffix
# Remove everything before the last "/" and remove extensions like .raw or .mzml
colnames_out <- gsub(pattern=".*/", replacement='', x=colnames_out)
colnames_out <- gsub(pattern="\\.(raw|mzML)$", replacement='', x=colnames_out)
return(colnames_out)
}
dT = DF
dat=df
#standardize the column names and order
#dat <- standardize_format(data)
colnames(dat) <- trim_colnames(dat)
devtools::load_all()
df <- data.table::fread("EXAMPLES/test_data/test_protein_report.csv") %>% as.data.frame()
meta <- data.table::fread("EXAMPLES/test_data/test_conditions.csv") %>% as.data.frame()
nrow(meta)
ncol(df)
dat_pro1 <- create_protdata(df, condition = meta)
View(dat_pro1)
View(dat_pro1@condition)
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
shiny::runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
df <- data.table::fread("EXAMPLES/basic_example_data/iPSC.csv")
dat_pro <- create_protdata(df)
normalize_median <- ProtPipe::median_normalize(dat_pro)
normalize_mean <- ProtPipe::mean_normalize(dat_pro)
t <- get_PCs(dat_pro)
View(t)
t[["components"]][["PC1"]]
View(t)
runApp('ProtPipe_shiny')
t <- get_umap(dat_pro)
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
df <- readRDS("EXAMPLES/VIRUS/virus_data.rds")
meta <- readRDS("EXAMPLES/VIRUS/virus_metadata.rds")
dat_pro <- create_protdata(df, intensity_cols = c(4:148), meta)
treatment_samples <- c("EBV_5_5d_1", "EBV_5_5d_1", "EBV_5_5d_1")
control_samples <- c("EBV_0_5d_1", "EBV_0_5d_2", "EBV_0_5d_3")
Log2_DP <- ProtPipe::log2_transform(dat_pro)
DE <- do_limma(Log2_DP, treatment_samples = treatment_samples, control_samples = control_samples)
en <- enrich_pathways(DE)
View(en)
View(en)
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
View(en)
plot(en$plots$gse_go_emapplot)
devtools::load_all()
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
shiny::runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
add_zip_tabular <- function(data, filename, subfolder, zip_workspace, zip_file){
file_path <- file.path(zip_workspace, subfolder, filename)
data.table::fwrite(data, file_path, sep = "\t")
# rel_path <- file.path(subfolder, filename)
# zip::zip_append(
#   zipfile = file.path(zip_workspace, zip_file),
#   files = rel_path,
#   root = zip_workspace
# )
# file.remove(file_path)
}
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
devtools::load_all()
runApp('ProtPipe_shiny')
devtools::load_all()
runApp('ProtPipe_shiny')
devtools::document()
devtools::document()
ls()
devtools::load_all()
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
#select condition
output$quality_control_condition <- renderUI({
req(intensity_file())
#req(sample_condition())
choices <- names(prot_data()@condition)
selectInput("qc_condition", "select condition to group by:", choices = choices)
})
runApp('ProtPipe_shiny')
shiny::runApp('ProtPipe_shiny')
devtools::document()
gb()
gc()
devtools::document()
memory.limit(size=56000)
devtools::document()
devtools::document()
setwd("~/ProtPipe")
devtools::document()
shiny::runApp('ProtPipe_shiny')
devtools::load_all()
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
t <- data.table::fread("~/ProtPipe/EXAMPLES/olink/npx_data1_meta_original.csv", data.table=FALSE)
View(t)
View(t)
t <- data.table::fread("~/ProtPipe/EXAMPLES/olink/npx_data1.csv", data.table=FALSE)
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
load("EXAMPLES/olink/npx_data1.rda")
file = "EXAMPLES/olink/npx_data1.xlsx"
metafile <- "EXAMPLES/olink/npx_data1_meta_original.csv"
npx <- OlinkAnalyze::read_NPX(file)
devtools::document()
npx <- OlinkAnalyze::read_NPX(file)
gc()
gc()
rm()
gc()
gc()
gc()
npx <- OlinkAnalyze::read_NPX(file)
file = "EXAMPLES/olink/npx_data1.xlsx"
metafile <- "EXAMPLES/olink/npx_data1_meta_original.csv"
npx <- OlinkAnalyze::read_NPX(file)
