roxygenize()
roxygen2::roxygenise()
setwd("~/ProtPipe")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
df <- readRDS("EXAMPLES/VIRUS/virus_data.rds")
meta <- readRDS("EXAMPLES/VIRUS/virus_metadata.rds")
dat_pro <- ProtPipe::create_protdata(df, condition = meta)
ProtPipe::plot_CVs(dat_pro, "viral.exposure")
roxygen2::roxygenise()
ProtPipe::plot_CVs(dat_pro, "viral.exposure")
devtools::load_all()
ProtPipe::plot_CVs(dat_pro, "viral.exposure")
ProtPipe::plot_CVs_optim(dat_pro, "viral.exposure")
bench::mark(
ProtPipe::plot_CVs(dat_pro, "viral.exposure")
)
install.packages(bench)
install.packages("bench")
bench::mark(
ProtPipe::plot_CVs(dat_pro, "viral.exposure")
)
bench::mark(
ProtPipe::plot_CVs(dat_pro, "viral.exposure")
)
PD <- dat_pro
condition <- "viral.exposure"
condition_file <- getCondition(PD)
if (!condition %in% colnames(condition_file)) {
stop("The selected condition does not appear in the condition file.")
}
intensities <- as.matrix(PD@data)
if (!is.numeric(intensities)) {
stop("PD@data must contain only numeric values.")
}
conds <- condition_file[[condition]]
unique_conds <- unique(conds)
cv_list <- lapply(unique_conds, function(cond) {
idx <- which(conds == cond)
if (length(idx) < min_samples) {
return(NULL)
}
sub_data <- intensities[, idx, drop = FALSE]
means <- matrixStats::rowMeans2(sub_data, na.rm = TRUE)
sds <- matrixStats::rowSds(sub_data, na.rm = TRUE)
cvs <- sds / means
data.frame(
Protein = rownames(intensities),
CV = cvs,
Condition = cond,
stringsAsFactors = FALSE
)
})
min_samples = 2
cv_list <- lapply(unique_conds, function(cond) {
idx <- which(conds == cond)
if (length(idx) < min_samples) {
return(NULL)
}
sub_data <- intensities[, idx, drop = FALSE]
means <- matrixStats::rowMeans2(sub_data, na.rm = TRUE)
sds <- matrixStats::rowSds(sub_data, na.rm = TRUE)
cvs <- sds / means
data.frame(
Protein = rownames(intensities),
CV = cvs,
Condition = cond,
stringsAsFactors = FALSE
)
})
View(intensities)
View(PD)
View(PD)
View(PD@data)
condition_file <- getCondition(PD)
if (!condition %in% colnames(condition_file)) {
stop("The selected condition does not appear in the condition file.")
}
intensities <- as.matrix(t(PD@data))
if (!is.numeric(intensities)) {
stop("PD@data must contain only numeric values.")
}
conds <- condition_file[[condition]]
unique_conds <- unique(conds)
cv_list <- lapply(unique_conds, function(cond) {
idx <- which(conds == cond)
if (length(idx) < min_samples) {
return(NULL)
}
sub_data <- intensities[, idx, drop = FALSE]
means <- matrixStats::rowMeans2(sub_data, na.rm = TRUE)
sds <- matrixStats::rowSds(sub_data, na.rm = TRUE)
cvs <- sds / means
data.frame(
Protein = rownames(intensities),
CV = cvs,
Condition = cond,
stringsAsFactors = FALSE
)
})
cv_df <- do.call(rbind, cv_list)
cv_df <- cv_df[!is.na(cv_df$CV), ]
return(cv_df)
ProtPipe::plot_CVs_optim(dat_pro, "viral.exposure")
devtools::document()
devtools::load_all()
ProtPipe::plot_CVs_optim(dat_pro, "viral.exposure")
View(cv_df)
condition_file <- getCondition(PD)
if (!condition %in% colnames(condition_file)) {
stop("The selected condition does not appear in the condition file.")
}
intensities <- as.matrix(PD@data))
if (!is.numeric(intensities)) {
stop("PD@data must contain only numeric values.")
}
conds <- condition_file[[condition]]
unique_conds <- unique(conds)
condition_file <- getCondition(PD)
if (!condition %in% colnames(condition_file)) {
stop("The selected condition does not appear in the condition file.")
}
intensities <- as.matrix(PD@data)
if (!is.numeric(intensities)) {
stop("PD@data must contain only numeric values.")
}
conds <- condition_file[[condition]]
unique_conds <- unique(conds)
cv_list <- lapply(unique_conds, function(cond) {
idx <- which(conds == cond)
if (length(idx) < min_samples) {
return(NULL)
}
sub_data <- intensities[, idx, drop = FALSE]
means <- matrixStats::rowMeans2(sub_data, na.rm = TRUE)
sds <- matrixStats::rowSds(sub_data, na.rm = TRUE)
cvs <- sds / means
data.frame(
Protein = PD@prot_meta[[1]],
CV = cvs,
Condition = cond,
stringsAsFactors = FALSE
)
})
cv_df <- do.call(rbind, cv_list)
cv_df <- cv_df[!is.na(cv_df$CV), ]
devtools::load_all()
ProtPipe::plot_CVs_optim(dat_pro, "viral.exposure")
bench::mark(
ProtPipe::plot_CVs(dat_pro, "viral.exposure")
)
system.time({
ProtPipe::plot_CVs(dat_pro, "viral.exposure")
})
system.time({
ProtPipe::plot_CVs_optim(dat_pro, "viral.exposure")
})
ProtPipe::plot_CVs(dat_pro, "viral.exposure")
ProtPipe::plot_CVs_optim(dat_pro, "viral.exposure")
devtools::load_all()
devtools::load_all()
ProtPipe::plot_CVs(dat_pro, "viral.exposure")
ProtPipe::plot_CVs_optim(dat_pro, "viral.exposure")
devtools::load_all()
ProtPipe::plot_CVs_optim(dat_pro, "viral.exposure", plot_type = "jitter")
devtools::load_all()
ProtPipe::plot_CVs_optim(dat_pro, "viral.exposure")
ProtPipe::plot_CVs_optim(dat_pro, "viral.exposure", plot_type = "jitter")
View(cv_df)
View(cv_df)
devtools::load_all()
devtools::document()
devtools::load_all()
View(cv_df)
shiny::runApp('ProtPipe_shiny')
devtools::load_all()
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
shiny::runApp('ProtPipe_shiny')
df <- readRDS("EXAMPLES/VIRUS/virus_data.rds")
meta <- readRDS("EXAMPLES/VIRUS/virus_metadata.rds")
dat_pro <- create_protdata(df, intensity_cols = c(4:148), meta)
treatment_samples <- c("EBV_5_5d_1", "EBV_5_5d_1", "EBV_5_5d_1")
control_samples <- c("EBV_0_5d_1", "EBV_0_5d_2", "EBV_0_5d_3")
Log2_DP <- ProtPipe::log2_transform(dat_pro)
DE <- do_limma(Log2_DP, treatment_samples = treatment_samples, control_samples = control_samples)
plot_volcano(DE, label_col = "Genes")
devtools::install_github("NIH-CARD/ProtPipe@feature/R_package_clean")
DT.original <- DE
if(is.null(label_col)){
label_col = names(DT.original)[1]
}
options(ggrepel.max.overlaps = Inf)
DT <- DT.original
# Set initial group to 'Others' and update based on thresholds
DT <- DT %>%
dplyr::mutate(Group = 'Others',
Group = dplyr::if_else(logFC >= lfc_threshold, 'UP', Group),
Group = dplyr::if_else(logFC <= -lfc_threshold, 'DOWN', Group),
Group = dplyr::if_else(adj.P.Val >= fdr_threshold, 'Others', Group),
labeltext = '')
lfc_threshold=1
fdr_threshold=0.01
options(ggrepel.max.overlaps = Inf)
DT <- DT.original
# Set initial group to 'Others' and update based on thresholds
DT <- DT %>%
dplyr::mutate(Group = 'Others',
Group = dplyr::if_else(logFC >= lfc_threshold, 'UP', Group),
Group = dplyr::if_else(logFC <= -lfc_threshold, 'DOWN', Group),
Group = dplyr::if_else(adj.P.Val >= fdr_threshold, 'Others', Group),
labeltext = '')
# If labelgene is provided, update labeltext accordingly
if (!is.null(labelgene)) {
DT <- DT %>%
dplyr::mutate(labeltext = dplyr::if_else(!!rlang::sym(label_col) %in% labelgene, !!rlang::sym(label_col), labeltext))
} else{
# Select top 5 genes for UP and DOWN groups
top5_gene <- DT %>%
dplyr::filter(Group == 'UP') %>%
dplyr::arrange(desc(logFC)) %>%
dplyr::slice_head(n = 5) %>%
dplyr::bind_rows(
DT %>%
dplyr::filter(Group == 'DOWN') %>%
dplyr::arrange(logFC) %>%
dplyr::slice_head(n = 5)
)
# Label top 5 genes using the specified label column
DT <- DT %>%
dplyr::mutate(labeltext = dplyr::if_else(!!rlang::sym(label_col) %in% top5_gene[[label_col]], !!rlang::sym(label_col), ''))
}
labelgene=NULL
# If labelgene is provided, update labeltext accordingly
if (!is.null(labelgene)) {
DT <- DT %>%
dplyr::mutate(labeltext = dplyr::if_else(!!rlang::sym(label_col) %in% labelgene, !!rlang::sym(label_col), labeltext))
} else{
# Select top 5 genes for UP and DOWN groups
top5_gene <- DT %>%
dplyr::filter(Group == 'UP') %>%
dplyr::arrange(desc(logFC)) %>%
dplyr::slice_head(n = 5) %>%
dplyr::bind_rows(
DT %>%
dplyr::filter(Group == 'DOWN') %>%
dplyr::arrange(logFC) %>%
dplyr::slice_head(n = 5)
)
# Label top 5 genes using the specified label column
DT <- DT %>%
dplyr::mutate(labeltext = dplyr::if_else(!!rlang::sym(label_col) %in% top5_gene[[label_col]], !!rlang::sym(label_col), ''))
}
label_col = NULL
if(is.null(label_col)){
label_col = names(DT.original)[1]
}
options(ggrepel.max.overlaps = Inf)
DT <- DT.original
# Set initial group to 'Others' and update based on thresholds
DT <- DT %>%
dplyr::mutate(Group = 'Others',
Group = dplyr::if_else(logFC >= lfc_threshold, 'UP', Group),
Group = dplyr::if_else(logFC <= -lfc_threshold, 'DOWN', Group),
Group = dplyr::if_else(adj.P.Val >= fdr_threshold, 'Others', Group),
labeltext = '')
# If labelgene is provided, update labeltext accordingly
if (!is.null(labelgene)) {
DT <- DT %>%
dplyr::mutate(labeltext = dplyr::if_else(!!rlang::sym(label_col) %in% labelgene, !!rlang::sym(label_col), labeltext))
} else{
# Select top 5 genes for UP and DOWN groups
top5_gene <- DT %>%
dplyr::filter(Group == 'UP') %>%
dplyr::arrange(desc(logFC)) %>%
dplyr::slice_head(n = 5) %>%
dplyr::bind_rows(
DT %>%
dplyr::filter(Group == 'DOWN') %>%
dplyr::arrange(logFC) %>%
dplyr::slice_head(n = 5)
)
# Label top 5 genes using the specified label column
DT <- DT %>%
dplyr::mutate(labeltext = dplyr::if_else(!!rlang::sym(label_col) %in% top5_gene[[label_col]], !!rlang::sym(label_col), ''))
}
# Select top 5 genes for UP and DOWN groups
top5_gene <- DT %>%
dplyr::filter(Group == 'UP') %>%
dplyr::arrange(desc(logFC)) %>%
dplyr::slice_head(n = 5) %>%
dplyr::bind_rows(
DT %>%
dplyr::filter(Group == 'DOWN') %>%
dplyr::arrange(logFC) %>%
dplyr::slice_head(n = 5)
)
View(top5_gene)
View(DT.original)
View(DT)
View(top5_gene)
up_rows <- DT[DT$Group == "UP", ]
up_rows <- DT[DT$Group == "UP", ]
sorted_up <- up_rows[order(-up_rows$logFC), ]
top_indices <- head(rownames(sorted_up), 5)
t <- DT[top_indices,]
View(t)
View(top5_gene)
View(t)
View(up_rows)
View(sorted_up)
View(DT)
DT <- DT.original
# Set initial group to 'Others' and update based on thresholds
DT <- DT %>%
dplyr::mutate(Group = 'Others',
Group = dplyr::if_else(logFC >= lfc_threshold, 'UP', Group),
Group = dplyr::if_else(logFC <= -lfc_threshold, 'DOWN', Group),
Group = dplyr::if_else(adj.P.Val >= fdr_threshold, 'Others', Group),
labeltext = '')
up_rows <- DT[DT$Group == "UP", ]
sorted_up <- up_rows[order(-up_rows$logFC), ]
top_indices <- head(rownames(sorted_up), 5)
down_rows <- DT[DT$Group == "DOWN", ]
sorted_down <- down_rows[order(-down_rows$logFC), ]
top_indices <- as.numeric(c(head(rownames(sorted_up), 5), head(rownames(sorted_down), 5)))
DT$labeltext[top_indices] <- DT[top_indices, label_col]
View(DT)
g <- ggplot2::ggplot(DT, ggplot2::aes(x = logFC, y = -log10(adj.P.Val))) +
ggplot2::geom_point(ggplot2::aes(color = Group)) +
ggplot2::scale_color_manual(breaks = c("DOWN", "Others", "UP"),
values = c("#67a9cf", "#969696", "#ef8a62")) +
ggplot2::theme_bw(base_size = 12) +
ggplot2::theme(legend.position = "bottom") +
ggrepel::geom_label_repel(
data = DT,
ggplot2::aes(label = labeltext),
size = 5,
box.padding = grid::unit(0.35, "lines"),
point.padding = grid::unit(0.3, "lines")) +
ggplot2::geom_hline(yintercept = -log10(fdr_threshold), linetype = "dashed") +
ggplot2::geom_vline(xintercept = lfc_threshold, linetype = "dashed") +
ggplot2::geom_vline(xintercept = -lfc_threshold, linetype = "dashed") +
ggplot2::theme_classic()
g
up_rows <- DT[DT$Group == "UP", ]
sorted_up <- up_rows[order(-up_rows$logFC), ]
down_rows <- DT[DT$Group == "DOWN", ]
sorted_down <- down_rows[order(-down_rows$logFC), ]
top_indices <- as.numeric(c(head(rownames(sorted_up), 5), head(rownames(sorted_down), 5)))
DT$labeltext[top_indices] <- DT[top_indices, label_col]
g <- ggplot2::ggplot(DT, ggplot2::aes(x = logFC, y = -log10(adj.P.Val))) +
ggplot2::geom_point(ggplot2::aes(color = Group)) +
ggplot2::scale_color_manual(breaks = c("DOWN", "Others", "UP"),
values = c("#67a9cf", "#969696", "#ef8a62")) +
ggplot2::theme_bw(base_size = 12) +
ggplot2::theme(legend.position = "bottom") +
ggrepel::geom_label_repel(
data = DT,
ggplot2::aes(label = labeltext),
size = 5,
box.padding = grid::unit(0.35, "lines"),
point.padding = grid::unit(0.3, "lines")) +
ggplot2::geom_hline(yintercept = -log10(fdr_threshold), linetype = "dashed") +
ggplot2::geom_vline(xintercept = lfc_threshold, linetype = "dashed") +
ggplot2::geom_vline(xintercept = -lfc_threshold, linetype = "dashed") +
ggplot2::theme_classic()
g
up_rows <- DT[DT$Group == "UP", ]
sorted_up <- up_rows[order(-up_rows$logFC), ]
down_rows <- DT[DT$Group == "DOWN", ]
sorted_down <- down_rows[order(down_rows$logFC), ]
top_indices <- as.numeric(c(head(rownames(sorted_up), 5), head(rownames(sorted_down), 5)))
DT$labeltext[top_indices] <- DT[top_indices, label_col]
g <- ggplot2::ggplot(DT, ggplot2::aes(x = logFC, y = -log10(adj.P.Val))) +
ggplot2::geom_point(ggplot2::aes(color = Group)) +
ggplot2::scale_color_manual(breaks = c("DOWN", "Others", "UP"),
values = c("#67a9cf", "#969696", "#ef8a62")) +
ggplot2::theme_bw(base_size = 12) +
ggplot2::theme(legend.position = "bottom") +
ggrepel::geom_label_repel(
data = DT,
ggplot2::aes(label = labeltext),
size = 5,
box.padding = grid::unit(0.35, "lines"),
point.padding = grid::unit(0.3, "lines")) +
ggplot2::geom_hline(yintercept = -log10(fdr_threshold), linetype = "dashed") +
ggplot2::geom_vline(xintercept = lfc_threshold, linetype = "dashed") +
ggplot2::geom_vline(xintercept = -lfc_threshold, linetype = "dashed") +
ggplot2::theme_classic()
print(g)
DT <- DT.original
# Set initial group to 'Others' and update based on thresholds
DT <- DT %>%
dplyr::mutate(Group = 'Others',
Group = dplyr::if_else(logFC >= lfc_threshold, 'UP', Group),
Group = dplyr::if_else(logFC <= -lfc_threshold, 'DOWN', Group),
Group = dplyr::if_else(adj.P.Val >= fdr_threshold, 'Others', Group),
labeltext = '')
up_indices <- order(DT$logFC, decreasing = TRUE)[DT$Group == "UP"]
top_up_indices <- head(up_indices, 5)
down_indices <- order(DT$logFC, decreasing = FALSE)[DT$Group == "DOWN"]
top_down_indices <- head(down_indices, 5)
top_indices <- c(top_up_indices, top_down_indices)
DT$labeltext[top_indices] <- DT[top_indices, label_col]
g <- ggplot2::ggplot(DT, ggplot2::aes(x = logFC, y = -log10(adj.P.Val))) +
ggplot2::geom_point(ggplot2::aes(color = Group)) +
ggplot2::scale_color_manual(breaks = c("DOWN", "Others", "UP"),
values = c("#67a9cf", "#969696", "#ef8a62")) +
ggplot2::theme_bw(base_size = 12) +
ggplot2::theme(legend.position = "bottom") +
ggrepel::geom_label_repel(
data = DT,
ggplot2::aes(label = labeltext),
size = 5,
box.padding = grid::unit(0.35, "lines"),
point.padding = grid::unit(0.3, "lines")) +
ggplot2::geom_hline(yintercept = -log10(fdr_threshold), linetype = "dashed") +
ggplot2::geom_vline(xintercept = lfc_threshold, linetype = "dashed") +
ggplot2::geom_vline(xintercept = -lfc_threshold, linetype = "dashed") +
ggplot2::theme_classic()
print(g)
t<-DT[down_indices]
t<-DT[down_indices,]
View(t)
g
down_indices <- order(DT$logFC, decreasing = FALSE)[DT$Group == "DOWN"]
top_down_indices <- head(down_indices, 5)
down_indices <- order(DT$logFC, decreasing = FALSE)[DT$Group == "DOWN"]
t<-DT[down_indices,]
View(t)
DT <- DT.original
# Set initial group to 'Others' and update based on thresholds
DT <- DT %>%
dplyr::mutate(Group = 'Others',
Group = dplyr::if_else(logFC >= lfc_threshold, 'UP', Group),
Group = dplyr::if_else(logFC <= -lfc_threshold, 'DOWN', Group),
Group = dplyr::if_else(adj.P.Val >= fdr_threshold, 'Others', Group),
labeltext = '')
up_rows <- which(DT$Group == "UP")
sorted_up_indices <- up_rows[order(DT$logFC[up_rows], decreasing = FALSE)]
top_up_indices <- head(sorted_up_indices, 5)
down_rows <- which(DT$Group == "DOWN")
sorted_down_indices <- down_rows[order(DT$logFC[down_rows], decreasing = FALSE)]
top_down_indices <- head(sorted_down_indices, 5)
top_indices <- c(top_up_indices, top_down_indices)
DT$labeltext[top_indices] <- DT[top_indices, label_col]
g <- ggplot2::ggplot(DT, ggplot2::aes(x = logFC, y = -log10(adj.P.Val))) +
ggplot2::geom_point(ggplot2::aes(color = Group)) +
ggplot2::scale_color_manual(breaks = c("DOWN", "Others", "UP"),
values = c("#67a9cf", "#969696", "#ef8a62")) +
ggplot2::theme_bw(base_size = 12) +
ggplot2::theme(legend.position = "bottom") +
ggrepel::geom_label_repel(
data = DT,
ggplot2::aes(label = labeltext),
size = 5,
box.padding = grid::unit(0.35, "lines"),
point.padding = grid::unit(0.3, "lines")) +
ggplot2::geom_hline(yintercept = -log10(fdr_threshold), linetype = "dashed") +
ggplot2::geom_vline(xintercept = lfc_threshold, linetype = "dashed") +
ggplot2::geom_vline(xintercept = -lfc_threshold, linetype = "dashed") +
ggplot2::theme_classic()
print(g)
DT <- DT.original
# Set initial group to 'Others' and update based on thresholds
DT <- DT %>%
dplyr::mutate(Group = 'Others',
Group = dplyr::if_else(logFC >= lfc_threshold, 'UP', Group),
Group = dplyr::if_else(logFC <= -lfc_threshold, 'DOWN', Group),
Group = dplyr::if_else(adj.P.Val >= fdr_threshold, 'Others', Group),
labeltext = '')
up_rows <- which(DT$Group == "UP")
sorted_up_indices <- up_rows[order(DT$logFC[up_rows], decreasing = TRUE)]
top_up_indices <- head(sorted_up_indices, 5)
down_rows <- which(DT$Group == "DOWN")
sorted_down_indices <- down_rows[order(DT$logFC[down_rows], decreasing = FALSE)]
top_down_indices <- head(sorted_down_indices, 5)
top_indices <- c(top_up_indices, top_down_indices)
DT$labeltext[top_indices] <- DT[top_indices, label_col]
g <- ggplot2::ggplot(DT, ggplot2::aes(x = logFC, y = -log10(adj.P.Val))) +
ggplot2::geom_point(ggplot2::aes(color = Group)) +
ggplot2::scale_color_manual(breaks = c("DOWN", "Others", "UP"),
values = c("#67a9cf", "#969696", "#ef8a62")) +
ggplot2::theme_bw(base_size = 12) +
ggplot2::theme(legend.position = "bottom") +
ggrepel::geom_label_repel(
data = DT,
ggplot2::aes(label = labeltext),
size = 5,
box.padding = grid::unit(0.35, "lines"),
point.padding = grid::unit(0.3, "lines")) +
ggplot2::geom_hline(yintercept = -log10(fdr_threshold), linetype = "dashed") +
ggplot2::geom_vline(xintercept = lfc_threshold, linetype = "dashed") +
ggplot2::geom_vline(xintercept = -lfc_threshold, linetype = "dashed") +
ggplot2::theme_classic()
print(g)
devtools::load_all()
df <- readRDS("EXAMPLES/VIRUS/virus_data.rds")
meta <- readRDS("EXAMPLES/VIRUS/virus_metadata.rds")
dat_pro <- create_protdata(df, intensity_cols = c(4:148), meta)
treatment_samples <- c("EBV_5_5d_1", "EBV_5_5d_1", "EBV_5_5d_1")
control_samples <- c("EBV_0_5d_1", "EBV_0_5d_2", "EBV_0_5d_3")
Log2_DP <- ProtPipe::log2_transform(dat_pro)
DE <- do_limma(Log2_DP, treatment_samples = treatment_samples, control_samples = control_samples)
plot_volcano(DE, label_col = "Genes")
