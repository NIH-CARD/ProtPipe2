View(dat_pro@condition)
View(dat_pro@data)
View(dat_pro@prot_meta)
df <- data.table::fread("EXAMPLES/test_data/test_protein_report.csv")
meta <- data.table::fread("EXAMPLES/test_data/test_conditions.csv")
dat_pro <- create_protdata(df, condition = meta)
df <- data.table::fread("EXAMPLES/test_data/test_protein_report.csv") %>% as.data.frame()
meta <- data.table::fread("EXAMPLES/test_data/test_conditions.csv") %>% as.data.frame()
dat_pro <- create_protdata(df, condition = meta)
View(dat_pro)
View(dat_pro@condition)
View(meta)
dat_pro1 <- create_protdata(df, condition = meta)
nrow(meta)
ncol(df)
View(df)
View(meta)
dat <- df
condition = meta
# Check that data is a data frame
if (!is.data.frame(dat)) {
stop("The 'data' argument must be a data frame.")
}
#get the intensity cols
if (is.null(intensity_cols)){
intensity_cols <- detect_intensity_cols(dat)
}
#standardize the column names and order
#dat <- standardize_format(data)
colnames(dat) <- trim_colnames(dat)
trim_colnames <- function(DT) {
colnames_out <- gsub(pattern="\\[.*\\] ", replacement='', x=colnames(DT))   # trim leading [N]
colnames_out <- gsub(pattern="\\..*\\.PG\\.Quantity|\\.PG\\.Quantity|\\..*Quantity.*", replacement='', x=colnames_out)   # remove suffix
# Remove everything before the last "/" and remove extensions like .raw or .mzml
colnames_out <- gsub(pattern=".*/", replacement='', x=colnames_out)
colnames_out <- gsub(pattern="\\.(raw|mzML)$", replacement='', x=colnames_out)
return(colnames_out)
}
#standardize the column names and order
#dat <- standardize_format(data)
colnames(dat) <- trim_colnames(dat)
View(dat)
trim_colnames <- function(DT) {
#colnames_out <- gsub(pattern="\\[.*\\] ", replacement='', x=colnames(DT))   # trim leading [N]
colnames_out <- gsub(pattern="\\..*\\.PG\\.Quantity|\\.PG\\.Quantity|\\..*Quantity.*", replacement='', x=colnames_out)   # remove suffix
# Remove everything before the last "/" and remove extensions like .raw or .mzml
colnames_out <- gsub(pattern=".*/", replacement='', x=colnames_out)
colnames_out <- gsub(pattern="\\.(raw|mzML)$", replacement='', x=colnames_out)
return(colnames_out)
}
dT = DF
dat=df
#standardize the column names and order
#dat <- standardize_format(data)
colnames(dat) <- trim_colnames(dat)
devtools::load_all()
df <- data.table::fread("EXAMPLES/test_data/test_protein_report.csv") %>% as.data.frame()
meta <- data.table::fread("EXAMPLES/test_data/test_conditions.csv") %>% as.data.frame()
nrow(meta)
ncol(df)
dat_pro1 <- create_protdata(df, condition = meta)
View(dat_pro1)
View(dat_pro1@condition)
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
shiny::runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
df <- data.table::fread("EXAMPLES/basic_example_data/iPSC.csv")
dat_pro <- create_protdata(df)
normalize_median <- ProtPipe::median_normalize(dat_pro)
normalize_mean <- ProtPipe::mean_normalize(dat_pro)
t <- get_PCs(dat_pro)
View(t)
t[["components"]][["PC1"]]
View(t)
runApp('ProtPipe_shiny')
t <- get_umap(dat_pro)
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
df <- readRDS("EXAMPLES/VIRUS/virus_data.rds")
meta <- readRDS("EXAMPLES/VIRUS/virus_metadata.rds")
dat_pro <- create_protdata(df, intensity_cols = c(4:148), meta)
treatment_samples <- c("EBV_5_5d_1", "EBV_5_5d_1", "EBV_5_5d_1")
control_samples <- c("EBV_0_5d_1", "EBV_0_5d_2", "EBV_0_5d_3")
Log2_DP <- ProtPipe::log2_transform(dat_pro)
DE <- do_limma(Log2_DP, treatment_samples = treatment_samples, control_samples = control_samples)
en <- enrich_pathways(DE)
View(en)
View(en)
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
View(en)
plot(en$plots$gse_go_emapplot)
devtools::load_all()
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
shiny::runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
add_zip_tabular <- function(data, filename, subfolder, zip_workspace, zip_file){
file_path <- file.path(zip_workspace, subfolder, filename)
data.table::fwrite(data, file_path, sep = "\t")
# rel_path <- file.path(subfolder, filename)
# zip::zip_append(
#   zipfile = file.path(zip_workspace, zip_file),
#   files = rel_path,
#   root = zip_workspace
# )
# file.remove(file_path)
}
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
devtools::load_all()
runApp('ProtPipe_shiny')
devtools::load_all()
runApp('ProtPipe_shiny')
devtools::document()
devtools::document()
ls()
devtools::load_all()
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
#select condition
output$quality_control_condition <- renderUI({
req(intensity_file())
#req(sample_condition())
choices <- names(prot_data()@condition)
selectInput("qc_condition", "select condition to group by:", choices = choices)
})
runApp('ProtPipe_shiny')
shiny::runApp('ProtPipe_shiny')
devtools::document()
gb()
gc()
devtools::document()
memory.limit(size=56000)
devtools::document()
devtools::document()
setwd("~/ProtPipe")
devtools::document()
shiny::runApp('ProtPipe_shiny')
devtools::load_all()
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
t <- data.table::fread("~/ProtPipe/EXAMPLES/olink/npx_data1_meta_original.csv", data.table=FALSE)
View(t)
View(t)
t <- data.table::fread("~/ProtPipe/EXAMPLES/olink/npx_data1.csv", data.table=FALSE)
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
load("EXAMPLES/olink/npx_data1.rda")
file = "EXAMPLES/olink/npx_data1.xlsx"
metafile <- "EXAMPLES/olink/npx_data1_meta_original.csv"
npx <- OlinkAnalyze::read_NPX(file)
devtools::document()
npx <- OlinkAnalyze::read_NPX(file)
gc()
gc()
rm()
gc()
gc()
gc()
npx <- OlinkAnalyze::read_NPX(file)
file = "EXAMPLES/olink/npx_data1.xlsx"
metafile <- "EXAMPLES/olink/npx_data1_meta_original.csv"
npx <- OlinkAnalyze::read_NPX(file)
devtools::document()
devtools::document()
npx <- OlinkAnalyze::read_NPX(file)
file = "EXAMPLES/olink/npx_data1.xlsx"
metafile <- "EXAMPLES/olink/npx_data1_meta_original.csv"
npx <- OlinkAnalyze::read_NPX(file)
gc()
shiny::runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
setwd("~/ProtPipe")
devtools::document()
devtools::load_all()
runApp('ProtPipe_shiny')
rsconnect::setAccountInfo(name='niacard', token='81905F9C65CC07F347BD3D176FCC6A40', secret='e1kR/XZ//NpZJ4KtPgl7AOp3vBB8jXsxYWGLMLpf')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
dat <- SomaDataIO::read_adat("EXAMPLES/soma/example_data_v5.0_plasma.adat")
View(dat)
soma_pro <- create_protdata_from_soma(dat, filter = FALSE)
View(soma_pro)
View(soma_pro@data)
View(soma_pro@prot_meta)
soma_sample_out=function(DT){
anno <- SomaDataIO::getAnalyteInfo(DT)%>%
dplyr::filter(Organism == "Human") %>%
dplyr::filter(Type == "Protein")
DT=as.data.frame(DT)
DT_dat=DT%>%
dplyr::filter(grepl("Sample", SampleType, ignore.case = TRUE))
#check for duplicated SampleID
duplicate_ids <- DT_dat$SampleId[duplicated(DT_dat$SampleId) | duplicated(DT_dat$SampleId, fromLast = TRUE)]
if(length(duplicate_ids>0)){
cat(paste0("removing duplicates: ", paste(duplicate_ids, collapse = ", ")))
DT_dat <- DT_dat[!DT_dat$SampleId %in% duplicate_ids, ]
}
rownames(DT_dat)=DT_dat$SampleId
DT_dat=DT_dat%>%
dplyr::select(matches("seq\\.", ignore.case = TRUE))%>%
t()
DT_dat=merge(anno[,grep('AptName|UniProt|EntrezGeneSymbol|TargetFullName',colnames(anno))], DT_dat,by.x='AptName',by.y=0,all.x=T)
DT_dat=DT_dat %>%
dplyr::filter(UniProt != "")%>%
dplyr::filter(EntrezGeneSymbol != "") %>%
dplyr::rename(Protein_Group= UniProt)%>%
dplyr::rename(Genes= EntrezGeneSymbol)
return(DT_dat)
}
##format data
soma_all_output=function(DT){
anno=SomaDataIO::getAnalyteInfo(DT)
DT=data.frame(DT)
DT_dat=data.frame(DT)%>%
dplyr::filter(grepl("Sample", SampleType, ignore.case = TRUE))
#check for duplicated SampleID
duplicate_ids <- DT_dat$SampleId[duplicated(DT_dat$SampleId) | duplicated(DT_dat$SampleId, fromLast = TRUE)]
if(length(duplicate_ids>0)){
cat(paste0("removing duplicates: ", paste(duplicate_ids, collapse = ", ")))
DT_dat <- DT_dat[!DT_dat$SampleId %in% duplicate_ids, ]
}
rownames(DT_dat)=DT_dat$SampleId
DT_dat = DT_dat[, grep('seq\\.', colnames(DT_dat))] %>%
t() %>%
as.data.frame()
Buffer_mean <- DT %>%
dplyr::filter(SampleType == "Buffer") %>%
dplyr::select(matches("seq\\.", ignore.case = TRUE)) %>%
dplyr::summarise(across(everything(), ~ mean(.x, na.rm = TRUE))) %>%
t() %>%
as.data.frame()%>%
{colnames(.) <- 'Buffer'; .}
Calibrator_mean <- DT %>%
dplyr::filter(SampleType == "Calibrator") %>%
dplyr::select(matches("seq\\.", ignore.case = TRUE)) %>%
dplyr::summarise(across(everything(), ~ mean(.x, na.rm = TRUE))) %>%
t() %>%
as.data.frame()%>%
{colnames(.) <- 'Calibrator'; .}
DT_combined <- cbind(Buffer_mean, Calibrator_mean, DT_dat)
DT_out=merge(anno[,grep('AptName|UniProt|EntrezGeneSymbol|TargetFullName|Organism|Type',colnames(anno))], DT_combined,by.x='AptName',by.y=0)
DT_out=DT_out%>%
dplyr::rename(Protein_Group= UniProt)%>%
dplyr::rename(Genes= EntrezGeneSymbol)
return(DT_out)
}
Buffer_filter=function(DT){
DT=as.data.frame(DT)
DT_filter <- DT %>%
dplyr::mutate(across(
.cols = -c(Protein_Group, Genes, Buffer,Calibrator),  # Exclude PG_group, genes, and Buffer
.fns = ~ ifelse(. < Buffer, NA, .)  # Apply the condition
))
return(DT_filter)
}
data1 <- soma_all_output(dat)
dat <- SomaDataIO::read_adat("EXAMPLES/soma/example_data_v5.0_plasma.adat")
data1 <- soma_all_output(dat)
View(data1)
DT <- dat
DT <- data
anno <- SomaDataIO::getAnalyteInfo(DT)%>%
dplyr::filter(Organism == "Human") %>%
dplyr::filter(Type == "Protein")
anno=SomaDataIO::getAnalyteInfo(DT)
DT <- dat
anno=SomaDataIO::getAnalyteInfo(DT)
View(anno)
DT=data.frame(DT)
DT_dat=data.frame(DT)%>%
dplyr::filter(grepl("Sample", SampleType, ignore.case = TRUE))
#check for duplicated SampleID
duplicate_ids <- DT_dat$SampleId[duplicated(DT_dat$SampleId) | duplicated(DT_dat$SampleId, fromLast = TRUE)]
if(length(duplicate_ids>0)){
cat(paste0("removing duplicates: ", paste(duplicate_ids, collapse = ", ")))
DT_dat <- DT_dat[!DT_dat$SampleId %in% duplicate_ids, ]
}
rownames(DT_dat)=DT_dat$SampleId
View(DT_dat)
source("~/ProtPipe/R/soma.R")
runApp('ProtPipe_shiny')
View(DT)
anno=SomaDataIO::getAnalyteInfo(DT)
anno=SomaDataIO::getAnalyteInfo(DT)
dat <- SomaDataIO::read_adat("EXAMPLES/soma/example_data_v5.0_plasma.adat")
DT <- dat
anno <- SomaDataIO::getAnalyteInfo(DT)%>%
dplyr::filter(Organism == "Human") %>%
dplyr::filter(Type == "Protein")
View(anno)
DT=as.data.frame(DT)
DT_dat=DT%>%
dplyr::filter(grepl("Sample", SampleType, ignore.case = TRUE))
View(DT_dat)
#check for duplicated SampleID
duplicate_ids <- DT_dat$SampleId[duplicated(DT_dat$SampleId) | duplicated(DT_dat$SampleId, fromLast = TRUE)]
if(length(duplicate_ids>0)){
cat(paste0("removing duplicates: ", paste(duplicate_ids, collapse = ", ")))
DT_dat <- DT_dat[!DT_dat$SampleId %in% duplicate_ids, ]
}
rownames(DT_dat)=DT_dat$SampleId
DT_dat=DT_dat%>%
dplyr::select(matches("seq\\.", ignore.case = TRUE))%>%
t()
View(DT_dat)
View(DT_dat)
View(DT)
View(DT_dat)
DT=as.data.frame(DT)
DT_dat=DT%>%
dplyr::filter(grepl("Sample", SampleType, ignore.case = TRUE))
#check for duplicated SampleID
duplicate_ids <- DT_dat$SampleId[duplicated(DT_dat$SampleId) | duplicated(DT_dat$SampleId, fromLast = TRUE)]
if(length(duplicate_ids>0)){
cat(paste0("removing duplicates: ", paste(duplicate_ids, collapse = ", ")))
DT_dat <- DT_dat[!DT_dat$SampleId %in% duplicate_ids, ]
}
View(DT_dat)
rownames(DT_dat)=DT_dat$SampleId
condition=DT_dat %>%
dplyr::select(-matches("seq\\.", ignore.case = TRUE))
View(condition)
View(condition)
adat <- DT
dat <- soma_sample_out(adat)
soma_sample_out=function(DT){
anno <- SomaDataIO::getAnalyteInfo(DT)%>%
dplyr::filter(Organism == "Human") %>%
dplyr::filter(Type == "Protein")
DT=as.data.frame(DT)
DT_dat=DT%>%
dplyr::filter(grepl("Sample", SampleType, ignore.case = TRUE))
#check for duplicated SampleID
duplicate_ids <- DT_dat$SampleId[duplicated(DT_dat$SampleId) | duplicated(DT_dat$SampleId, fromLast = TRUE)]
if(length(duplicate_ids>0)){
cat(paste0("removing duplicates: ", paste(duplicate_ids, collapse = ", ")))
DT_dat <- DT_dat[!DT_dat$SampleId %in% duplicate_ids, ]
}
rownames(DT_dat)=DT_dat$SampleId
condition=DT_dat %>%
dplyr::select(-matches("seq\\.", ignore.case = TRUE))
DT_dat=DT_dat%>%
dplyr::select(matches("seq\\.", ignore.case = TRUE))%>%
t()
DT_dat=merge(anno[,grep('AptName|UniProt|EntrezGeneSymbol|TargetFullName',colnames(anno))], DT_dat,by.x='AptName',by.y=0,all.x=T)
DT_dat=DT_dat %>%
dplyr::filter(UniProt != "")%>%
dplyr::filter(EntrezGeneSymbol != "") %>%
dplyr::rename(Protein_Group= UniProt)%>%
dplyr::rename(Genes= EntrezGeneSymbol)
return(list(data = DT_dat, condition = condition))
}
dat <- soma_sample_out(adat)
View(dat)
devtools::load_all()
rm(list = c("create_protdata_from_soma"))
devtools::load_all()
dat <- SomaDataIO::read_adat("EXAMPLES/soma/example_data_v5.0_plasma.adat")
soma_pro <- create_protdata_from_soma(dat, filter = FALSE)
View(soma_pro)
runApp('ProtPipe_shiny')
devtools::load_all()
runApp('ProtPipe_shiny')
browseVignettes("OlinkAnalyze")
runApp('ProtPipe_shiny')
devtools::load_all()
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
runApp('ProtPipe_shiny')
file = "EXAMPLES/olink/npx_data1.xlsx"
metafile <- "EXAMPLES/olink/npx_data1_meta_original.csv"
npx <- OlinkAnalyze::read_NPX(file)
gb()
gc()
npx <- OlinkAnalyze::read_NPX(file)
usethis::edit_r_environ()
file = "EXAMPLES/olink/npx_data1.xlsx"
file = "EXAMPLES/olink/npx_data1.xlsx"
metafile <- "EXAMPLES/olink/npx_data1_meta_original.csv"
npx <- OlinkAnalyze::read_NPX(file)
View(npx)
soma_pro <- create_protdata_from_soma(dat, filter = FALSE)
devtools::document
devtools::document()
devtools::load_all()
soma_pro <- create_protdata_from_soma(dat, filter = FALSE)
dat <- npx
soma_pro <- create_protdata_from_soma(dat, filter = FALSE)
dat_pro <- create_protdata_from_olink(npx, filter = F)
View(dat_pro)
View(dat_pro@data)
my_npx <- npx
npx_wide <- my_npx |>
# dplyr::filter(AssayType == "assay") |>
dplyr::select(SampleID, UniProt,Assay, OlinkID, NPX) |>
tidyr::pivot_wider(names_from = SampleID, values_from = NPX,values_fn = mean) |>
dplyr::rename(Protein_Group = UniProt, Genes = Assay)
View(npx_wide)
condition <- my_npx |>
# dplyr::filter(AssayType == "assay") |>
dplyr::select(-c(SampleID, UniProt, Assay, OlinkID, NPX)) |>
tidyr::pivot_wider(names_from = SampleID, values_from = NPX,values_fn = mean) |>
dplyr::rename(Protein_Group = UniProt, Genes = Assay)
View(my_npx)
condition <- my_npx |>
# dplyr::filter(AssayType == "assay") |>
dplyr::select(-c(SampleID, UniProt, Assay, OlinkID, NPX))# |>
View(condition)
meta <- read.delim(metafile, sep = ";")
View(meta)
shiny::runApp('ProtPipe_shiny')
devtools::load_all()
runApp('ProtPipe_shiny')
devtools::load_all()
runApp('ProtPipe_shiny')
data.table::fread("EXAMPLES/olink/npx_data1_meta_original.csv", data.table=FALSE)
t<-data.table::fread("EXAMPLES/olink/npx_data1_meta_original.csv", data.table=FALSE)
View(t)
runApp('ProtPipe_shiny')
devtools::load_all()
runApp('ProtPipe_shiny')
file = "EXAMPLES/olink/npx_data1.xlsx"
metafile <- "EXAMPLES/olink/npx_data1_meta_original.csv"
npx <- OlinkAnalyze::read_NPX(file)
meta <- read.delim(metafile, sep = ";")
dat_pro <- create_protdata_from_olink(npx, filter = F)
View(dat_pro)
dat_pro <- create_protdata_from_olink(npx, meta, filter = F)
View(meta)
runApp('ProtPipe_shiny')
file = "EXAMPLES/olink/npx_data1.csv"
metafile <- "EXAMPLES/olink/manifest.csv"
npx <- OlinkAnalyze::read_NPX(file)
meta <- read.delim(metafile, sep = ";")
dat_pro <- create_protdata_from_olink(npx, meta, filter = F)
View(meta)
meta <- read.delim(metafile, sep = ",")
View(meta)
dat_pro <- create_protdata_from_olink(npx, meta, filter = F)
View(npx)
View(meta)
runApp('ProtPipe_shiny')
devtools::load_all()
devtools::document()
trim_names <- function(names) {
colnames_out <- gsub(pattern="\\[.*\\] ", replacement='', x=names)   # trim leading [N]
colnames_out <- gsub(pattern="\\..*\\.PG\\.Quantity|\\.PG\\.Quantity|\\..*Quantity.*", replacement='', x=colnames_out)   # remove suffix
# Remove everything before the last "/" and remove extensions like .raw or .mzml
colnames_out <- gsub(pattern=".*/", replacement='', x=colnames_out)
colnames_out <- gsub(pattern="\\.(raw|mzML)$", replacement='', x=colnames_out)
return(colnames_out)
}
devtools::document()
devtools::document()
devtools::document()
devtools::document()
install.packages(c("devtools", "roxygen2", "pkgload", "rlang"))
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::load_all()
